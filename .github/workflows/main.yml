on: [push, pull_request]

name: Continuous integration

jobs:
  Prepare:
    runs-on: ubuntu-24.04
    outputs:
      nightly_version: ${{ steps.read_toolchain.outputs.nightly_version }}
      msrv_version: ${{ steps.read_msrv.outputs.msrv_version }}
    steps:
      - name: "Checkout repo"
        uses: actions/checkout@v4
      - name: "Read nightly version"
        id: read_toolchain
        run: |
          set -euo pipefail
          version=$(cat nightly-version)
          echo "nightly_version=$version" >> $GITHUB_OUTPUT
      - name: Read MSRV from clippy.toml
        id: read_msrv
        run: |
          set -euo pipefail
          msrv=$(grep '^msrv *= *"' clippy.toml | sed -E 's/.*"([^"]+)".*/\1/')
          echo "msrv_version=$msrv" >> "$GITHUB_OUTPUT"

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Checkout Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Running cargo fmt
        run: cargo fmt --all -- --check

  simpcli_test:
    name: SimpCLI Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Checkout Toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Running cargo test
        run: |
          cd simpcli
          cargo test

  bench_test:
    name: Jets-Bench Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Checkout Toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Running cargo test
        run: |
          cargo install cargo-criterion
          cd jets-bench
          cargo test
          cargo criterion --no-run

  test:
    name: Tests
    needs: Prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust:
          - stable
          - beta
          - ${{ needs.Prepare.outputs.nightly_version }}
          - ${{ needs.Prepare.outputs.msrv_version }}
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Checkout Toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - name: Set dependencies
        run: cp Cargo-recent.lock Cargo.lock
      - name: Running cargo test
        env:
          FEATURES: bitcoin elements test-utils
        run: |
          for f in $FEATURES; do echo "Features: $f" && cargo test --locked --no-default-features --features="$f"; done
          cd simplicity-sys
          cargo test --locked --no-default-features
          cargo test --locked --features="test-utils"
          echo "No default features" && cargo test --locked --no-default-features
          echo "All features" && cargo test --locked --all-features

  ignored:
    name: Ignored Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Checkout Toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Running cargo test
        run: cargo test -- --ignored

  clippy:
    name: Clippy
    needs: Prepare
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Checkout Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ needs.Prepare.outputs.nightly_version }}
          components: clippy
      - name: Running cargo clippy
        run: cargo clippy --workspace --all-targets -- --deny warnings

  test-other-platforms:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Checkout Toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Set dependencies
        run: cp Cargo-recent.lock Cargo.lock
      - name: Run unit tests
        run: |
          cargo test --locked --manifest-path simplicity-sys/Cargo.toml
          cargo test --locked --workspace --all-features

  docs:
    name: Docs
    needs: Prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Crate
        uses: actions/checkout@v4
      - name: Checkout Toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ needs.Prepare.outputs.nightly_version }}
      - name: Check that documentation builds without errors
        env:
          RUSTDOCFLAGS: "--cfg docsrs -D warnings -D rustdoc::broken-intra-doc-links"
        run: cargo doc -j1 --all-features
